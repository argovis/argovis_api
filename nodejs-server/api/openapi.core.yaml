openapi: 3.0.3
info:
  title: Argovis API
  description: "REST API for Argo profiles, platforms, selections, BGC data, gridded\
    \ products, etc."
  contact:
    name: Argovis Collaboration
    url: https://argovis.colorado.edu
    email: argovis@colorado.edu
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: "2.0"
externalDocs:
  description: Find us on GitHub
  url: https://github.com/argovis/argovis_api
servers:
- url: https://argovis-api.colorado.edu
- url: /
security:
- name: []
tags:
- name: argo
  description: "Argo profile data, including core, BGC and deep floats"
- name: cchdo
  description: CCHDO profile data.
- name: easyocean
  description: Interpolated CCHDO profile data.
- name: grid
  description: Gridded products derived from Argo floats and simulations.
- name: tc
  description: tropical cyclone data
- name: argone
  description: Argo float position forcast product
- name: summary (experimental)
  description: Summary statistics (mostly for internal use)
- name: Argo trajectories (experimental)
  description: Trajectories of argo floats
- name: timeseries
  description: timeseries-formatted grids.
- name: extended
  description: objected with geographic extent beyond a single point
- name: token
  description: token validation
- name: ping
  description: ping for liveness
paths:
  /ping:
    get:
      tags:
      - ping
      summary: Dummy endpoint for liveness checks
      operationId: ping
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK
                x-content-type: text/plain
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Ping
  /argone:
    get:
      tags:
      - argone
      summary: Probabilities of floats moving between two points in a range of forecast
        projections
      operationId: findargone
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: forecastOrigin
        in: query
        description: "Longitude,latitude of forecast origin location."
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: forecastGeolocation
        in: query
        description: "Longitude,latitude of forecast destination location."
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: metadata
        in: query
        description: metadata pointer
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: compression
        in: query
        description: Data minification strategy to apply.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - minimal
      - name: data
        in: query
        description: Forecast durations to include. Return only documents that have
          all data requested. Accepts ~ negation to filter out documents including
          the specified data. Omission of this parameter will result in metadata only
          responses.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "90"
          items:
            pattern: "^((~)?((90)|(180)|(270)|(360)|(450)|(540)|(630)|(720)|(810)|(900)|(990)|(1080)|(1170)|(1260)|(1350)|(1440)|(1530)|(1620)|(1710)|(1800){1})|all|except-data-values)$"
            type: string
      - name: batchmeta
        in: query
        description: return the metadata documents corresponding to a temporospatial
          data search
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/argone'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argone
  /argone/meta:
    get:
      tags:
      - argone
      summary: argone metadata search and filter.
      operationId: findargoneMeta
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/argoneMeta'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argone
  /tc:
    get:
      tags:
      - tc
      summary: Tropical cyclone search and filter.
      operationId: findTC
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: startDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the beginning
          of the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: endDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the end of
          the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: polygon
        in: query
        description: "array of [lon, lat] vertices describing a polygon bounding the\
          \ region of interest; final point must match initial point"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[-74.1,40.5],[-73.7,40.5],[-74.0,40.8],[-74.1,40.5]]"
      - name: multipolygon
        in: query
        description: array of polygon regions; region of interest is taken as the
          intersection of all listed polygons.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[[0,0],[0,1],[1,1],[1,0],[0,0]],[[0.5,0],[0.5,1],[1.5,1],[1.5,0],[0.5,0]]]"
      - name: box
        in: query
        description: "lon, lat pairs of the lower left and upper right corners of\
          \ a box on a mercator projection, packed like [[lower left lon, lower left\
          \ lat],[upper right lon, upper right lat]]"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[0,0],[1,1]]"
      - name: winding
        in: query
        description: Enforce ccw winding for polygon and multipolygon
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "true"
      - name: center
        in: query
        description: center to measure max radius from when defining circular region
          of interest; must be used in conjunction with query string parameter 'radius'.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: radius
        in: query
        description: km from centerpoint when defining circular region of interest;
          must be used in conjunction with query string parameter 'center'.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 50
      - name: name
        in: query
        description: name of tropical cyclone
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: LANE
      - name: metadata
        in: query
        description: metadata pointer
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: mostrecent
        in: query
        description: get back only the n records with the most recent values of timestamp.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: compression
        in: query
        description: Data minification strategy to apply.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - minimal
      - name: data
        in: query
        description: "Keys of data to include. Return only documents that have all\
          \ data requested, within the pressure range if specified. Accepts ~ negation\
          \ to filter out documents including the specified data. Omission of this\
          \ parameter will result in metadata only responses."
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "wind,~surface_pressure"
          items:
            pattern: "^((~)?((wind)|(surface_pressure){1})|all|except-data-values)$"
            type: string
      - name: batchmeta
        in: query
        description: return the metadata documents corresponding to a temporospatial
          data search
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tc'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Tc
  /tc/meta:
    get:
      tags:
      - tc
      summary: Tropical cyclone metadata search and filter.
      operationId: findTCmeta
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: name
        in: query
        description: name of tropical cyclone
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: LANE
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tcMeta'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Tc
  /tc/vocabulary:
    get:
      tags:
      - tc
      summary: List all possible values for certain tc query string parameters
      operationId: tcVocab
      parameters:
      - name: parameter
        in: query
        description: TC query string parameter to summarize possible values of.
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - name
          - data
          - metadata
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Tc
  /grids/{gridName}:
    get:
      tags:
      - grid
      summary: Search and filter for grid named in path
      operationId: findgrid
      parameters:
      - name: gridName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - rg09
          - kg21
          - glodap
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: startDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the beginning
          of the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: endDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the end of
          the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: polygon
        in: query
        description: "array of [lon, lat] vertices describing a polygon bounding the\
          \ region of interest; final point must match initial point"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[-74.1,40.5],[-73.7,40.5],[-74.0,40.8],[-74.1,40.5]]"
      - name: multipolygon
        in: query
        description: array of polygon regions; region of interest is taken as the
          intersection of all listed polygons.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[[0,0],[0,1],[1,1],[1,0],[0,0]],[[0.5,0],[0.5,1],[1.5,1],[1.5,0],[0.5,0]]]"
      - name: box
        in: query
        description: "lon, lat pairs of the lower left and upper right corners of\
          \ a box on a mercator projection, packed like [[lower left lon, lower left\
          \ lat],[upper right lon, upper right lat]]"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[0,0],[1,1]]"
      - name: winding
        in: query
        description: Enforce ccw winding for polygon and multipolygon
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "true"
      - name: center
        in: query
        description: center to measure max radius from when defining circular region
          of interest; must be used in conjunction with query string parameter 'radius'.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: radius
        in: query
        description: km from centerpoint when defining circular region of interest;
          must be used in conjunction with query string parameter 'center'.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 50
      - name: compression
        in: query
        description: Data minification strategy to apply.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - minimal
      - name: mostrecent
        in: query
        description: get back only the n records with the most recent values of timestamp.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: data
        in: query
        description: "Keys of data to include. Return only documents that have all\
          \ data requested, within the pressure range if specified. Accepts ~ negation\
          \ to filter out documents including the specified data. Omission of this\
          \ parameter will result in metadata only responses."
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: rg09_salinity
          items:
            type: string
      - name: presRange
        in: query
        description: Pressure range in dbar to filter for; levels outside this range
          will not be returned.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: batchmeta
        in: query
        description: return the metadata documents corresponding to a temporospatial
          data search
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/grid'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Grid
  /grids/meta:
    get:
      tags:
      - grid
      summary: Metadata for grids by ID
      operationId: findgridMeta
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/gridMeta'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Grid
  /grids/{gridName}/vocabulary:
    get:
      tags:
      - grid
      summary: List data and lattice for the requested grid.
      operationId: gridVocab
      parameters:
      - name: gridName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - rg09
          - kg21
          - glodap
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Grid
  /timeseries/{timeseriesName}:
    get:
      tags:
      - timeseries
      summary: Search and filter for timeseries named in path
      operationId: findtimeseries
      parameters:
      - name: timeseriesName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - noaasst
          - copernicussla
          - ccmpwind
          - bsose
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: startDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the beginning
          of the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: endDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the end of
          the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: polygon
        in: query
        description: "array of [lon, lat] vertices describing a polygon bounding the\
          \ region of interest; final point must match initial point"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[-74.1,40.5],[-73.7,40.5],[-74.0,40.8],[-74.1,40.5]]"
      - name: box
        in: query
        description: "lon, lat pairs of the lower left and upper right corners of\
          \ a box on a mercator projection, packed like [[lower left lon, lower left\
          \ lat],[upper right lon, upper right lat]]"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[0,0],[1,1]]"
      - name: multipolygon
        in: query
        description: array of polygon regions; region of interest is taken as the
          intersection of all listed polygons.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[[0,0],[0,1],[1,1],[1,0],[0,0]],[[0.5,0],[0.5,1],[1.5,1],[1.5,0],[0.5,0]]]"
      - name: winding
        in: query
        description: Enforce ccw winding for polygon and multipolygon
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "true"
      - name: center
        in: query
        description: center to measure max radius from when defining circular region
          of interest; must be used in conjunction with query string parameter 'radius'.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: radius
        in: query
        description: km from centerpoint when defining circular region of interest;
          must be used in conjunction with query string parameter 'center'.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 50
      - name: presRange
        in: query
        description: Pressure range in dbar to filter for; levels outside this range
          will not be returned.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: compression
        in: query
        description: Data minification strategy to apply.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - minimal
      - name: mostrecent
        in: query
        description: get back only the n records with the most recent values of timestamp.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: data
        in: query
        description: "Keys of data to include. Return only documents that have all\
          \ data requested, within the pressure range if specified. Accepts ~ negation\
          \ to filter out documents including the specified data. Omission of this\
          \ parameter will result in metadata only responses."
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "uwnd,vwnd"
          items:
            type: string
      - name: batchmeta
        in: query
        description: return the metadata documents corresponding to a temporospatial
          data search
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/genericTimeseries'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Timeseries
  /timeseries/meta:
    get:
      tags:
      - timeseries
      summary: Metadata for timeseries by ID
      operationId: findtimeseriesMeta
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/genericTimeseriesMeta'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Timeseries
  /timeseries/{timeseriesName}/vocabulary:
    get:
      tags:
      - timeseries
      summary: List data and lattice for the requested timeseries.
      operationId: timeseriesVocab
      parameters:
      - name: timeseriesName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - noaasst
          - copernicussla
          - ccmpwind
          - bsose
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Timeseries
  /extended/{extendedName}:
    get:
      tags:
      - extended
      summary: Search and filter for extended object named in path
      operationId: findExtended
      parameters:
      - name: extendedName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - ar
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: startDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the beginning
          of the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: endDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the end of
          the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: polygon
        in: query
        description: "array of [lon, lat] vertices describing a polygon bounding the\
          \ region of interest; final point must match initial point"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[-74.1,40.5],[-73.7,40.5],[-74.0,40.8],[-74.1,40.5]]"
      - name: multipolygon
        in: query
        description: array of polygon regions; region of interest is taken as the
          intersection of all listed polygons.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[[0,0],[0,1],[1,1],[1,0],[0,0]],[[0.5,0],[0.5,1],[1.5,1],[1.5,0],[0.5,0]]]"
      - name: box
        in: query
        description: "lon, lat pairs of the lower left and upper right corners of\
          \ a box on a mercator projection, packed like [[lower left lon, lower left\
          \ lat],[upper right lon, upper right lat]]"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[0,0],[1,1]]"
      - name: winding
        in: query
        description: Enforce ccw winding for polygon and multipolygon
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "true"
      - name: center
        in: query
        description: center to measure max radius from when defining circular region
          of interest; must be used in conjunction with query string parameter 'radius'.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: radius
        in: query
        description: km from centerpoint when defining circular region of interest;
          must be used in conjunction with query string parameter 'center'.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 50
      - name: compression
        in: query
        description: Data minification strategy to apply.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - minimal
      - name: mostrecent
        in: query
        description: get back only the n records with the most recent values of timestamp.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: batchmeta
        in: query
        description: return the metadata documents corresponding to a temporospatial
          data search
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/genericExtended'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Extended
  /extended/meta:
    get:
      tags:
      - extended
      summary: Metadata for extended objects by ID
      operationId: findextendedMeta
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/genericExtendedMeta'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Extended
  /extended/{extendedName}/vocabulary:
    get:
      tags:
      - extended
      summary: Vocab data for the named extended object.
      operationId: extendedVocab
      parameters:
      - name: extendedName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - ar
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Extended
  /cchdo:
    get:
      tags:
      - cchdo
      summary: CCHDO search and filter.
      operationId: findCCHDO
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: startDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the beginning
          of the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: endDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the end of
          the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: polygon
        in: query
        description: "array of [lon, lat] vertices describing a polygon bounding the\
          \ region of interest; final point must match initial point"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[-74.1,40.5],[-73.7,40.5],[-74.0,40.8],[-74.1,40.5]]"
      - name: multipolygon
        in: query
        description: array of polygon regions; region of interest is taken as the
          intersection of all listed polygons.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[[0,0],[0,1],[1,1],[1,0],[0,0]],[[0.5,0],[0.5,1],[1.5,1],[1.5,0],[0.5,0]]]"
      - name: box
        in: query
        description: "lon, lat pairs of the lower left and upper right corners of\
          \ a box on a mercator projection, packed like [[lower left lon, lower left\
          \ lat],[upper right lon, upper right lat]]"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[0,0],[1,1]]"
      - name: winding
        in: query
        description: Enforce ccw winding for polygon and multipolygon
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "true"
      - name: center
        in: query
        description: center to measure max radius from when defining circular region
          of interest; must be used in conjunction with query string parameter 'radius'.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: radius
        in: query
        description: km from centerpoint when defining circular region of interest;
          must be used in conjunction with query string parameter 'center'.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 50
      - name: metadata
        in: query
        description: metadata pointer
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: woceline
        in: query
        description: WOCE line to search for. See /cchdo/vocabulary?parameter=woceline
          for list of options.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: A10
      - name: cchdo_cruise
        in: query
        description: CCHDO cruise ID to search for. See /cchdo/vocabulary?parameter=cchdo_cruise
          for list of options.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 518
      - name: source
        in: query
        description: Experimental program source(s) to search for; document must match
          all sources to be returned. Accepts ~ negation to filter out documents.
          See /<data route>/vocabulary?parameter=source for list of options.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "argo_bgc,~argo_core"
          items:
            type: string
      - name: compression
        in: query
        description: Data minification strategy to apply.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - minimal
      - name: mostrecent
        in: query
        description: get back only the n records with the most recent values of timestamp.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: data
        in: query
        description: "Keys of data to include. Return only documents that have all\
          \ data requested, within the pressure range if specified. Accepts ~ negation\
          \ to filter out documents including the specified data. Omission of this\
          \ parameter will result in metadata only responses."
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "temperature_btl,~salinity_ctd"
          items:
            pattern: "^((~)?((ammonium)|(ammonium_error)|(ammonium_woceqc)|(arabinose)|(arabinose_woceqc)|(argon)|(argon_error)|(argon_woceqc)|(bacterial_cell_count)|(bacterial_cell_count_woceqc)|(barium)|(barium_l)|(barium_l_woceqc)|(barium_woceqc)|(bionbr)|(bnlid)|(bottle_latitude)|(bottle_longitude)|(bottle_number)|(bottle_number_woceqc)|(bottle_salinity)|(bottle_salinity_woceqc)|(bottle_time)|(brdu_uptake)|(brdu_uptake_woceqc)|(carbon_tetrachloride)|(carbon_tetrachloride_l)|(carbon_tetrachloride_l_woceqc)|(carbon_tetrachloride_woceqc)|(cdom_wavelength_300)|(cdom_wavelength_300_woceqc)|(cdom_wavelength_325)|(cdom_wavelength_325_woceqc)|(cdom_wavelength_340)|(cdom_wavelength_340_woceqc)|(cdom_wavelength_380)|(cdom_wavelength_380_woceqc)|(cdom_wavelength_412)|(cdom_wavelength_412_woceqc)|(cdom_wavelength_443)|(cdom_wavelength_443_woceqc)|(cdom_wavelength_490)|(cdom_wavelength_490_woceqc)|(cdom_wavelength_555)|(cdom_wavelength_555_woceqc)|(cdomsl)|(cdomsl_woceqc)|(cdomsn)|(cdomsn_woceqc)|(cesium_134_bq)|(cesium_134_bq_woceqc)|(cesium_137_bq)|(cesium_137_bq_error)|(cesium_137_bq_woceqc)|(cfc_11)|(cfc_113)|(cfc_113_l)|(cfc_113_l_woceqc)|(cfc_113_woceqc)|(cfc_11_error)|(cfc_11_l)|(cfc_11_l_woceqc)|(cfc_11_woceqc)|(cfc_12)|(cfc_12_error)|(cfc_12_l)|(cfc_12_l_woceqc)|(cfc_12_woceqc)|(chlorodifluoroethane)|(chlorodifluoroethane_woceqc)|(chlorodifluoromethane)|(chlorodifluoromethane_woceqc)|(chlorophyll_a)|(chlorophyll_a_ug_kg)|(chlorophyll_a_ug_kg_woceqc)|(chlorophyll_a_woceqc)|(co2_mole_fraction)|(co2_mole_fraction_woceqc)|(ctd_beamcp)|(ctd_beamcp_woceqc)|(ctd_beta650_124)|(ctd_beta700_raw)|(ctd_beta700_raw_woceqc)|(ctd_cdom)|(ctd_cdom_raw)|(ctd_cdom_raw_woceqc)|(ctd_cdom_woceqc)|(ctd_fluor)|(ctd_fluor_arbitrary)|(ctd_fluor_raw)|(ctd_fluor_raw_woceqc)|(ctd_fluor_woceqc)|(ctd_nitrate)|(ctd_nitrate_woceqc)|(ctd_number_of_observations)|(ctd_optode_oxygen)|(ctd_optode_oxygen_raw)|(ctd_optode_oxygen_raw_woceqc)|(ctd_optode_oxygen_woceqc)|(ctd_oxygen_umol_l)|(ctd_pressure_raw)|(ctd_temperature_unk)|(ctd_temperature_unk_woceqc)|(ctd_transmissometer)|(ctd_transmissometer_raw)|(ctd_transmissometer_raw_woceqc)|(ctd_transmissometer_woceqc)|(ctd_turbidity_ftu)|(ctd_turbidity_ftu_woceqc)|(ctd_turbidity_ntu)|(ctd_turbidity_ntu_woceqc)|(cyanobacteria_cell_count)|(cyanobacteria_cell_count_woceqc)|(d15n_nitrite_nitrate)|(d15n_nitrite_nitrate_woceqc)|(d15n_no3)|(d15n_no3_woceqc)|(d18o_nitrate)|(d18o_nitrate_woceqc)|(d18o_nitrite_nitrate)|(d18o_nitrite_nitrate_woceqc)|(dcns)|(dcns_woceqc)|(del_carbon_13_dic)|(del_carbon_13_dic_error)|(del_carbon_13_dic_woceqc)|(del_carbon_14_dic)|(del_carbon_14_dic_error)|(del_carbon_14_dic_woceqc)|(del_deuterium)|(del_deuterium_error)|(del_deuterium_woceqc)|(del_nitrogen_15)|(del_nitrogen_15_woceqc)|(del_oxygen_18)|(del_oxygen_18_error)|(del_oxygen_18_woceqc)|(delta_helium_3)|(delta_helium_3_error)|(delta_helium_3_woceqc)|(density_salinity)|(density_salinity_woceqc)|(dichlorofluoroethane)|(dichlorofluoroethane_woceqc)|(dissolved_organic_carbon)|(dissolved_organic_carbon_13)|(dissolved_organic_carbon_13_error)|(dissolved_organic_carbon_13_woceqc)|(dissolved_organic_carbon_14)|(dissolved_organic_carbon_14_error)|(dissolved_organic_carbon_14_woceqc)|(dissolved_organic_carbon_woceqc)|(dissolved_organic_nitrogen)|(dissolved_organic_nitrogen_woceqc)|(downcast_oxygen)|(downcast_oxygen_woceqc)|(downcast_pressure)|(downcast_pressure_woceqc)|(doxy)|(doxy_bfile)|(doxy_bfile_woceqc)|(doxy_woceqc)|(fco2)|(fco2_in_situ)|(fco2_temperature)|(fco2_woceqc)|(fdom)|(fdom_woceqc)|(fm_depth)|(fm_depth_woceqc)|(fucose)|(fucose_woceqc)|(galactose)|(galactose_woceqc)|(geotraces_sample)|(glucose)|(glucose_woceqc)|(helium)|(helium_error)|(helium_woceqc)|(hplc_19_hexanoyloxyfucoxanthin)|(hplc_19_hexanoyloxyfucoxanthin_woceqc)|(hplc_19butanoyloxyfucoxanthin)|(hplc_19butanoyloxyfucoxanthin_woceqc)|(hplc_alloxanthin)|(hplc_alloxanthin_woceqc)|(hplc_alpha_beta_carotenes)|(hplc_alpha_beta_carotenes_woceqc)|(hplc_chlorophyll_c1_c2)|(hplc_chlorophyll_c1_c2_woceqc)|(hplc_chlorophyll_c2)|(hplc_chlorophyll_c2_woceqc)|(hplc_chlorophyll_c3)|(hplc_chlorophyll_c3_woceqc)|(hplc_chlorophyllide_a)|(hplc_chlorophyllide_a_woceqc)|(hplc_diadinoxanthin)|(hplc_diadinoxanthin_woceqc)|(hplc_diatoxanthin)|(hplc_diatoxanthin_woceqc)|(hplc_divinyl_chlorophyll_a)|(hplc_divinyl_chlorophyll_a_woceqc)|(hplc_lutein)|(hplc_lutein_woceqc)|(hplc_monovinyl_chlorophyll_a)|(hplc_monovinyl_chlorophyll_a_woceqc)|(hplc_monovinyl_chlorophyll_b)|(hplc_monovinyl_chlorophyll_b_woceqc)|(hplc_neoxanthin)|(hplc_neoxanthin_woceqc)|(hplc_peridinin)|(hplc_peridinin_woceqc)|(hplc_pheophorbide_a)|(hplc_pheophorbide_a_woceqc)|(hplc_pheophytin_a)|(hplc_pheophytin_a_woceqc)|(hplc_prasinoxanthin)|(hplc_prasinoxanthin_woceqc)|(hplc_tot_chl_a)|(hplc_tot_chl_a_woceqc)|(hplc_tot_chl_b)|(hplc_tot_chl_b_woceqc)|(hplc_tot_chl_c)|(hplc_tot_chl_c_woceqc)|(hplc_violaxanthin)|(hplc_violaxanthin_woceqc)|(hplc_zeaxanthin)|(hplc_zeaxanthin_woceqc)|(hpld_antheraxanthin)|(hpld_antheraxanthin_woceqc)|(krypton)|(krypton_error)|(krypton_woceqc)|(ldeo_sample_number)|(mannose)|(mannose_woceqc)|(methane)|(methane_l)|(methane_woceqc)|(methyl_bromide)|(methyl_bromide_woceqc)|(methyl_chloride)|(methyl_chloride_woceqc)|(methyl_chloroform)|(methyl_chloroform_woceqc)|(methyl_iodide)|(methyl_iodide_woceqc)|(neon)|(neon_error)|(neon_woceqc)|(nitrate)|(nitrate_error)|(nitrate_woceqc)|(nitrite)|(nitrite_error)|(nitrite_nitrate)|(nitrite_nitrate_l)|(nitrite_nitrate_l_woceqc)|(nitrite_nitrate_woceqc)|(nitrite_woceqc)|(nitrous_oxide)|(nitrous_oxide_woceqc)|(odf_pressure)|(oxygen)|(oxygen_ml_l)|(oxygen_ml_l_woceqc)|(oxygen_woceqc)|(package_depth)|(package_depth_woceqc)|(par)|(par_raw)|(par_raw_woceqc)|(par_woceqc)|(partial_co2_temperature)|(partial_pressure_of_co2)|(partial_pressure_of_co2_woceqc)|(particulate_organic_carbon)|(particulate_organic_carbon_woceqc)|(particulate_organic_nitrogen)|(particulate_organic_nitrogen_mol)|(particulate_organic_nitrogen_mol_woceqc)|(particulate_organic_nitrogen_woceqc)|(ph_nbs)|(ph_nbs_woceqc)|(ph_sws)|(ph_sws_woceqc)|(ph_temperature)|(ph_temperature_woceqc)|(ph_total_h_scale)|(ph_total_h_scale_woceqc)|(ph_unknown_scale)|(ph_unknown_scale_woceqc)|(phaeophytin)|(phaeophytin_ug_l)|(phaeophytin_ug_l_woceqc)|(phaeophytin_woceqc)|(phosphate)|(phosphate_error)|(phosphate_l)|(phosphate_l_woceqc)|(phosphate_woceqc)|(phytoplankton_cell_count)|(phytoplankton_cell_count_woceqc)|(picoeukaryote_cell_counts)|(picoeukaryote_cell_counts_woceqc)|(potential_temperature)|(potential_temperature_woceqc)|(pressure)|(pressure_woceqc)|(prochlorophyte_cell_count)|(prochlorophyte_cell_count_woceqc)|(radium_226)|(radium_226_error)|(radium_226_woceqc)|(radium_228)|(radium_228_226)|(radium_228_226_error)|(radium_228_226_woceqc)|(radium_228_error)|(radium_228_woceqc)|(ref_temperature)|(ref_temperature_c)|(ref_temperature_c_woceqc)|(ref_temperature_woceqc)|(reference_salinity)|(reference_salinity_woceqc)|(refractive_index_anomaly)|(refractive_index_anomaly_woceqc)|(rev_pressure)|(rev_pressure_woceqc)|(rev_temperature)|(rev_temperature_90)|(rev_temperature_90_woceqc)|(rev_temperature_c)|(rev_temperature_c_woceqc)|(rev_temperature_woceqc)|(rhamnose)|(rhamnose_woceqc)|(salinity)|(salinity_bfile)|(salinity_bfile_woceqc)|(salinity_woceqc)|(sample)|(sigma0)|(sigma0_woceqc)|(silicate)|(silicate_error)|(silicate_l)|(silicate_l_woceqc)|(silicate_woceqc)|(sm_depth)|(sm_depth_woceqc)|(somma_salinity)|(spar_raw)|(spar_raw_woceqc)|(sulfur_hexifluoride)|(sulfur_hexifluoride_woceqc)|(synechococcus_cell_count)|(synechococcus_cell_count_woceqc)|(temperature)|(temperature_bfile)|(temperature_bfile_woceqc)|(temperature_woceqc)|(total_alkalinity)|(total_alkalinity_woceqc)|(total_carbon)|(total_carbon_woceqc)|(total_dissolved_nitrogen)|(total_dissolved_nitrogen_woceqc)|(total_dissolved_phosphorus)|(total_dissolved_phosphorus_woceqc)|(total_organic_carbon)|(total_organic_carbon_l)|(total_organic_carbon_l_woceqc)|(total_organic_carbon_woceqc)|(total_organic_nitrogen)|(total_organic_nitrogen_l)|(total_organic_nitrogen_l_woceqc)|(total_organic_nitrogen_woceqc)|(trifluoromethylsulfur_pentafluoride)|(trifluoromethylsulfur_pentafluoride_woceqc)|(tritium)|(tritium_error)|(tritium_woceqc)|(urea)|(urea_woceqc)|(user_bottle_number)|(user_bottle_number_woceqc)|(user_sample_number)|(user_station_number)|(xenon)|(xenon_error)|(xenon_woceqc){1})|all|except-data-values|[0-9]+)$"
            type: string
      - name: presRange
        in: query
        description: Pressure range in dbar to filter for; levels outside this range
          will not be returned.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: batchmeta
        in: query
        description: return the metadata documents corresponding to a temporospatial
          data search
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cchdo'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Cchdo
  /cchdo/meta:
    get:
      tags:
      - cchdo
      summary: GO-SHIP metadata search and filter.
      operationId: findCCHDOmeta
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: woceline
        in: query
        description: WOCE line to search for. See /cchdo/vocabulary?parameter=woceline
          for list of options.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: A10
      - name: cchdo_cruise
        in: query
        description: CCHDO cruise ID to search for. See /cchdo/vocabulary?parameter=cchdo_cruise
          for list of options.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 518
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cchdoMeta'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Cchdo
  /cchdo/vocabulary:
    get:
      tags:
      - cchdo
      summary: List all possible values for certain CCHDO query string parameters
      operationId: cchdoVocab
      parameters:
      - name: parameter
        in: query
        description: GO-SHIP query string parameter to summarize possible values of.
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - woceline
          - cchdo_cruise
          - source
          - data
          - metadata
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Cchdo
  /easyocean:
    get:
      tags:
      - easyocean
      summary: Easyocean search and filter.
      operationId: findeasyocean
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: startDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the beginning
          of the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: endDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the end of
          the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: polygon
        in: query
        description: "array of [lon, lat] vertices describing a polygon bounding the\
          \ region of interest; final point must match initial point"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[-74.1,40.5],[-73.7,40.5],[-74.0,40.8],[-74.1,40.5]]"
      - name: multipolygon
        in: query
        description: array of polygon regions; region of interest is taken as the
          intersection of all listed polygons.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[[0,0],[0,1],[1,1],[1,0],[0,0]],[[0.5,0],[0.5,1],[1.5,1],[1.5,0],[0.5,0]]]"
      - name: box
        in: query
        description: "lon, lat pairs of the lower left and upper right corners of\
          \ a box on a mercator projection, packed like [[lower left lon, lower left\
          \ lat],[upper right lon, upper right lat]]"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[0,0],[1,1]]"
      - name: winding
        in: query
        description: Enforce ccw winding for polygon and multipolygon
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "true"
      - name: center
        in: query
        description: center to measure max radius from when defining circular region
          of interest; must be used in conjunction with query string parameter 'radius'.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: radius
        in: query
        description: km from centerpoint when defining circular region of interest;
          must be used in conjunction with query string parameter 'center'.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 50
      - name: metadata
        in: query
        description: metadata pointer
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: woceline
        in: query
        description: WOCE line to search for. See /cchdo/vocabulary?parameter=woceline
          for list of options.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: A10
      - name: compression
        in: query
        description: Data minification strategy to apply.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - minimal
      - name: mostrecent
        in: query
        description: get back only the n records with the most recent values of timestamp.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: data
        in: query
        description: "Keys of data to include. Return only documents that have all\
          \ data requested, within the pressure range if specified. Accepts ~ negation\
          \ to filter out documents including the specified data. Omission of this\
          \ parameter will result in metadata only responses."
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "absolute_salinity,~conservative_temperature"
          items:
            pattern: "^((~)?((absolute_salinity)|(conservative_temperature)|(ctd_salinity)|(ctd_temperature)|(doxy)|(pressure){1})|all|except-data-values|[0-9]+)$"
            type: string
      - name: presRange
        in: query
        description: Pressure range in dbar to filter for; levels outside this range
          will not be returned.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: batchmeta
        in: query
        description: return the metadata documents corresponding to a temporospatial
          data search
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: section_start_date
        in: query
        description: Start date of the section of interest; see metadata corresponding
          to the WOCE line of interest for valid options.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/easyocean'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Easyocean
  /easyocean/meta:
    get:
      tags:
      - easyocean
      summary: Easyocean metadata search and filter.
      operationId: findeasyoceanmeta
      parameters:
      - name: woceline
        in: query
        description: WOCE line to search for. See /cchdo/vocabulary?parameter=woceline
          for list of options.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: A10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/easyoceanMeta'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Easyocean
  /easyocean/vocabulary:
    get:
      tags:
      - easyocean
      summary: List all possible values for certain easyocean query string parameters
      operationId: easyoceanVocab
      parameters:
      - name: parameter
        in: query
        description: Easyocean query string parameter to summarize possible values
          of.
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - woceline
          - data
          - metadata
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Easyocean
  /argo:
    get:
      tags:
      - argo
      summary: Argo search and filter.
      operationId: findArgo
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: startDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the beginning
          of the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: endDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the end of
          the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: polygon
        in: query
        description: "array of [lon, lat] vertices describing a polygon bounding the\
          \ region of interest; final point must match initial point"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[-74.1,40.5],[-73.7,40.5],[-74.0,40.8],[-74.1,40.5]]"
      - name: multipolygon
        in: query
        description: array of polygon regions; region of interest is taken as the
          intersection of all listed polygons.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[[0,0],[0,1],[1,1],[1,0],[0,0]],[[0.5,0],[0.5,1],[1.5,1],[1.5,0],[0.5,0]]]"
      - name: box
        in: query
        description: "lon, lat pairs of the lower left and upper right corners of\
          \ a box on a mercator projection, packed like [[lower left lon, lower left\
          \ lat],[upper right lon, upper right lat]]"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[0,0],[1,1]]"
      - name: winding
        in: query
        description: Enforce ccw winding for polygon and multipolygon
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "true"
      - name: center
        in: query
        description: center to measure max radius from when defining circular region
          of interest; must be used in conjunction with query string parameter 'radius'.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: radius
        in: query
        description: km from centerpoint when defining circular region of interest;
          must be used in conjunction with query string parameter 'center'.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 50
      - name: metadata
        in: query
        description: metadata pointer
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: platform
        in: query
        description: Unique platform ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "4902911"
      - name: platform_type
        in: query
        description: Make/model of platform
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: PALACE
      - name: source
        in: query
        description: Experimental program source(s) to search for; document must match
          all sources to be returned. Accepts ~ negation to filter out documents.
          See /<data route>/vocabulary?parameter=source for list of options.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "argo_bgc,~argo_core"
          items:
            type: string
      - name: compression
        in: query
        description: Data minification strategy to apply.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - minimal
      - name: mostrecent
        in: query
        description: get back only the n records with the most recent values of timestamp.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: data
        in: query
        description: "Keys of data to include. Return only documents that have all\
          \ data requested, within the pressure range if specified. Accepts ~ negation\
          \ to filter out documents including the specified data. Omission of this\
          \ parameter will result in metadata only responses."
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          $ref: '#/components/schemas/argo_data_keys'
      - name: presRange
        in: query
        description: Pressure range in dbar to filter for; levels outside this range
          will not be returned.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: batchmeta
        in: query
        description: return the metadata documents corresponding to a temporospatial
          data search
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/argo'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argo
  /argo/meta:
    get:
      tags:
      - argo
      summary: Argo metadata search and filter.
      operationId: findArgometa
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: platform
        in: query
        description: Unique platform ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "4902911"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/argoMeta'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argo
  /argo/vocabulary:
    get:
      tags:
      - argo
      summary: List all possible values for certain Argo query string parameters
      operationId: argoVocab
      parameters:
      - name: parameter
        in: query
        description: Argo query string parameter to summarize possible values of.
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - platform
          - source
          - data
          - metadata
          - platform_type
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argo
  /argo/overview:
    get:
      tags:
      - argo
      summary: Summarizes some collection-level statistics about Argo data.
      operationId: argoOverview
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argo
  /argo/dacs:
    get:
      tags:
      - argo
      summary: Summarizes some datacenter-level statistics about Argo data.
      operationId: argoDACs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argo
  /argo/bgc:
    get:
      tags:
      - argo
      summary: Summarizes some float-level statistics for Argo BGC floats.
      operationId: argoBGC
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Argo
  /argotrajectories:
    get:
      tags:
      - Argo trajectories (experimental)
      summary: Argo trajectory search and filter.
      operationId: findArgoTrajectory
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: startDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the beginning
          of the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: endDate
        in: query
        description: ISO 8601 UTC date-time formatted string indicating the end of
          the time period of interest.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      - name: polygon
        in: query
        description: "array of [lon, lat] vertices describing a polygon bounding the\
          \ region of interest; final point must match initial point"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[-74.1,40.5],[-73.7,40.5],[-74.0,40.8],[-74.1,40.5]]"
      - name: multipolygon
        in: query
        description: array of polygon regions; region of interest is taken as the
          intersection of all listed polygons.
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[[0,0],[0,1],[1,1],[1,0],[0,0]],[[0.5,0],[0.5,1],[1.5,1],[1.5,0],[0.5,0]]]"
      - name: box
        in: query
        description: "lon, lat pairs of the lower left and upper right corners of\
          \ a box on a mercator projection, packed like [[lower left lon, lower left\
          \ lat],[upper right lon, upper right lat]]"
        required: false
        style: form
        explode: true
        allowReserved: true
        schema:
          type: string
          example: "[[0,0],[1,1]]"
      - name: winding
        in: query
        description: Enforce ccw winding for polygon and multipolygon
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - "true"
      - name: center
        in: query
        description: center to measure max radius from when defining circular region
          of interest; must be used in conjunction with query string parameter 'radius'.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          type: array
          example: "10,20.1"
          items:
            maxItems: 2
            minItems: 2
            type: number
      - name: radius
        in: query
        description: km from centerpoint when defining circular region of interest;
          must be used in conjunction with query string parameter 'center'.
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 50
      - name: metadata
        in: query
        description: metadata pointer
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: platform
        in: query
        description: Unique platform ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "4902911"
      - name: compression
        in: query
        description: Data minification strategy to apply.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - minimal
      - name: mostrecent
        in: query
        description: get back only the n records with the most recent values of timestamp.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: data
        in: query
        description: Keys of data to include. Return only documents that have all
          data requested. Accepts ~ negation to filter out documents including the
          specified data. Omission of this parameter will result in metadata only
          responses.
        required: false
        style: form
        explode: false
        allowReserved: true
        schema:
          $ref: '#/components/schemas/argotrajectory_data_keys'
      - name: batchmeta
        in: query
        description: return the metadata documents corresponding to a temporospatial
          data search
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/argotrajectory'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: ArgoTrajectoriesExperimental
  /argotrajectories/meta:
    get:
      tags:
      - Argo trajectories (experimental)
      summary: Argo trajectory metadata search and filter.
      operationId: findArgotrajectorymeta
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      - name: platform
        in: query
        description: Unique platform ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "4902911"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/argotrajectoryMeta'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: ArgoTrajectoriesExperimental
  /argotrajectories/vocabulary:
    get:
      tags:
      - Argo trajectories (experimental)
      summary: List all possible values for certain Argo trajectory query string parameters
      operationId: argotrajectoryVocab
      parameters:
      - name: parameter
        in: query
        description: Argo trajectory query string parameter to summarize possible
          values of.
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - platform
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: ArgoTrajectoriesExperimental
  /summary:
    get:
      tags:
      - summary (experimental)
      summary: Fetch a document from the summary collection by ID.
      operationId: fetchSummary
      parameters:
      - name: id
        in: query
        description: Unique ID to search for.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 4902911_0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: SummaryExperimental
  /token:
    get:
      tags:
      - token
      summary: validate an API token
      operationId: validateToken
      parameters:
      - name: token
        in: query
        description: token to validate
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      x-swagger-router-controller: Token
components:
  schemas:
    arShapeSchema:
      required:
      - _id
      - date
      - date_formatted
      - geolocation
      - shapeId
      type: object
      properties:
        _id:
          type: string
        date:
          type: string
          format: date-time
        shapeId:
          type: integer
        geolocation:
          $ref: '#/components/schemas/geoJSONpolygon'
        date_formateed:
          type: string
          format: date
    argone:
      required:
      - _id
      - geolocation
      - geolocation_forecast
      - metadata
      type: object
      properties:
        _id:
          type: string
        metadata:
          type: array
          items:
            type: string
        geolocation:
          $ref: '#/components/schemas/geoJSONpoint'
        geolocation_forecast:
          $ref: '#/components/schemas/geoJSONpoint'
        data:
          $ref: '#/components/schemas/data'
      example:
        metadata:
        - metadata
        - metadata
        data:
        - - ""
          - ""
        - - ""
          - ""
        geolocation_forecast: null
        _id: _id
        geolocation:
          coordinates:
          - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
          type: type
    argoneMeta:
      required:
      - _id
      - data_info
      - data_type
      - date_updated_argovis
      - levels
      - source
      type: object
      properties:
        _id:
          type: string
        data_type:
          type: string
        date_updated_argovis:
          type: string
          format: date-time
        source:
          type: array
          items:
            $ref: '#/components/schemas/generic_source_info'
        levels:
          type: array
          items:
            type: number
        data_info:
          $ref: '#/components/schemas/data_info'
      example:
        data_info:
        - ""
        - ""
        data_type: data_type
        _id: _id
        source:
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        date_updated_argovis: 2000-01-23T04:56:07.000+00:00
        levels:
        - 0.80082819046101150206595775671303272247314453125
        - 0.80082819046101150206595775671303272247314453125
    tc:
      required:
      - _id
      - basin
      - class
      - geolocation
      - metadata
      - record_identifier
      - timestamp
      type: object
      properties:
        _id:
          type: string
        geolocation:
          $ref: '#/components/schemas/geoJSONpoint'
        basin:
          type: number
        timestamp:
          type: string
          format: date-time
        metadata:
          type: array
          items:
            type: string
        data:
          $ref: '#/components/schemas/data'
        record_identifier:
          type: string
        class:
          type: string
      example:
        metadata:
        - metadata
        - metadata
        data:
        - - ""
          - ""
        - - ""
          - ""
        _id: _id
        basin: 0.80082819046101150206595775671303272247314453125
        record_identifier: record_identifier
        class: class
        geolocation:
          coordinates:
          - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
          type: type
        timestamp: 2000-01-23T04:56:07.000+00:00
    tcMeta:
      required:
      - _id
      - data_info
      - data_type
      - date_updated_argovis
      - name
      - num
      - source
      type: object
      properties:
        _id:
          type: string
        data_type:
          type: string
        data_info:
          $ref: '#/components/schemas/data_info'
        date_updated_argovis:
          type: string
          format: date-time
        source:
          type: array
          items:
            $ref: '#/components/schemas/generic_source_info'
        name:
          type: string
        num:
          type: number
      example:
        data_info:
        - ""
        - ""
        num: 0.80082819046101150206595775671303272247314453125
        data_type: data_type
        name: name
        _id: _id
        source:
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        date_updated_argovis: 2000-01-23T04:56:07.000+00:00
    grid:
      required:
      - _id
      - basin
      - geolocation
      - metadata
      - timestamp
      type: object
      properties:
        _id:
          type: string
        metadata:
          type: array
          items:
            type: string
        geolocation:
          $ref: '#/components/schemas/geoJSONpoint'
        basin:
          type: number
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/data'
      example:
        metadata:
        - metadata
        - metadata
        data:
        - - ""
          - ""
        - - ""
          - ""
        _id: _id
        basin: 0.80082819046101150206595775671303272247314453125
        geolocation:
          coordinates:
          - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
          type: type
        timestamp: 2000-01-23T04:56:07.000+00:00
    gridMeta:
      required:
      - _id
      - data_info
      - data_type
      - date_updated_argovis
      - levels
      - source
      type: object
      properties:
        _id:
          type: string
        data_type:
          type: string
        date_updated_argovis:
          type: string
          format: date-time
        source:
          type: array
          items:
            $ref: '#/components/schemas/generic_source_info'
        levels:
          type: array
          items:
            type: number
        data_info:
          $ref: '#/components/schemas/data_info'
      example:
        data_info:
        - ""
        - ""
        data_type: data_type
        _id: _id
        source:
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        date_updated_argovis: 2000-01-23T04:56:07.000+00:00
        levels:
        - 0.80082819046101150206595775671303272247314453125
        - 0.80082819046101150206595775671303272247314453125
    geoJSONpoint:
      required:
      - coordinates
      - type
      type: object
      properties:
        type:
          type: string
        coordinates:
          type: array
          items:
            maxItems: 2
            minItems: 2
            type: number
      example:
        coordinates:
        - 0.80082819046101150206595775671303272247314453125
        - 0.80082819046101150206595775671303272247314453125
        type: type
    geoJSONpolygon:
      type: object
      properties:
        type:
          type: string
        coordinates:
          type: array
          items:
            type: array
            items:
              maxItems: 2
              minItems: 2
              type: number
    geoJSONmultipolygon:
      type: object
      properties:
        type:
          type: string
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                type: array
                items:
                  maxItems: 2
                  minItems: 2
                  type: number
      example:
        coordinates:
        - - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
        - - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
        type: type
    data:
      type: array
      items:
        type: array
        items:
          anyOf:
          - type: string
          - type: number
    data_info:
      type: array
      items:
        anyOf:
        - type: array
          items:
            type: string
        - type: array
          items:
            type: array
            items:
              anyOf:
              - type: string
              - type: number
    generic_source_info:
      type: object
      properties:
        source:
          type: array
          items:
            type: string
        url:
          type: string
        date_updated:
          type: string
          format: date-time
        doi:
          type: string
      example:
        date_updated: 2000-01-23T04:56:07.000+00:00
        source:
        - source
        - source
        url: url
        doi: doi
    timeseries:
      type: array
      items:
        type: string
        format: date-time
        example: 2010-01-01T00:00:00Z
    cchdo:
      required:
      - _id
      - basin
      - cast
      - data_info
      - geolocation
      - metadata
      - source
      - station
      - timestamp
      type: object
      properties:
        _id:
          type: string
        metadata:
          type: array
          items:
            type: string
        geolocation:
          $ref: '#/components/schemas/geoJSONpoint'
        btm_depth:
          type: number
        file_hash:
          type: string
        basin:
          type: number
        timestamp:
          type: string
          format: date-time
        source:
          type: array
          items:
            $ref: '#/components/schemas/generic_source_info'
        data_warning:
          type: array
          items:
            type: string
            enum:
            - degenerate_levels
            - missing_basin
            - missing_location
            - missing_timestamp
        station:
          type: string
        cast:
          type: number
        data:
          $ref: '#/components/schemas/data'
        data_info:
          $ref: '#/components/schemas/data_info'
      example:
        metadata:
        - metadata
        - metadata
        data:
        - - ""
          - ""
        - - ""
          - ""
        basin: 6.02745618307040320615897144307382404804229736328125
        source:
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        btm_depth: 0.80082819046101150206595775671303272247314453125
        data_warning:
        - degenerate_levels
        - degenerate_levels
        cast: 1.46581298050294517310021547018550336360931396484375
        data_info:
        - ""
        - ""
        file_hash: file_hash
        station: station
        _id: _id
        geolocation:
          coordinates:
          - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
          type: type
        timestamp: 2000-01-23T04:56:07.000+00:00
    cchdoMeta:
      required:
      - _id
      - cchdo_cruise_id
      - data_type
      - date_updated_argovis
      - expocode
      - woce_lines
      type: object
      properties:
        _id:
          type: string
        date_updated_argovis:
          type: string
          format: date-time
        data_type:
          type: string
        country:
          type: string
        data_center:
          type: string
        instrument:
          type: string
        pi_name:
          type: array
          items:
            type: string
        expocode:
          type: string
        file_expocode:
          type: string
        cchdo_cruise_id:
          type: number
        woce_lines:
          type: array
          items:
            type: string
        positioning_system:
          type: string
      example:
        country: country
        positioning_system: positioning_system
        expocode: expocode
        woce_lines:
        - woce_lines
        - woce_lines
        pi_name:
        - pi_name
        - pi_name
        file_expocode: file_expocode
        cchdo_cruise_id: 0.80082819046101150206595775671303272247314453125
        data_type: data_type
        data_center: data_center
        instrument: instrument
        _id: _id
        date_updated_argovis: 2000-01-23T04:56:07.000+00:00
    easyocean:
      required:
      - _id
      - basin
      - data_info
      - geolocation
      - metadata
      - source
      - timestamp
      type: object
    easyoceanMeta:
      required:
      - _id
      - date_updated_argovis
      - occupancies
      type: object
      properties:
        _id:
          type: string
        date_updated_argovis:
          type: string
          format: date-time
        occupancies:
          type: array
          items:
            $ref: '#/components/schemas/easyoceanMeta_occupancies'
      example:
        occupancies:
        - varying_direction: varying_direction
          expocodes:
          - expocodes
          - expocodes
          static_direction: static_direction
          time_boundaries:
          - 2000-01-23T04:56:07.000+00:00
          - 2000-01-23T04:56:07.000+00:00
        - varying_direction: varying_direction
          expocodes:
          - expocodes
          - expocodes
          static_direction: static_direction
          time_boundaries:
          - 2000-01-23T04:56:07.000+00:00
          - 2000-01-23T04:56:07.000+00:00
        _id: _id
        date_updated_argovis: 2000-01-23T04:56:07.000+00:00
    argo:
      required:
      - _id
      - basin
      - cycle_number
      - data_info
      - date_updated_argovis
      - geolocation
      - metadata
      - source
      - timestamp
      type: object
      properties:
        _id:
          type: string
        geolocation:
          $ref: '#/components/schemas/geoJSONpoint'
        basin:
          type: number
        timestamp:
          type: string
          format: date-time
        metadata:
          type: array
          items:
            type: string
        data:
          $ref: '#/components/schemas/data'
        data_info:
          $ref: '#/components/schemas/data_info'
        date_updated_argovis:
          type: string
          format: date-time
        source:
          type: array
          items:
            $ref: '#/components/schemas/generic_source_info'
        data_warning:
          type: array
          items:
            type: string
            enum:
            - degenerate_levels
            - missing_basin
            - missing_location
            - missing_timestamp
        cycle_number:
          type: number
        geolocation_argoqc:
          type: number
        profile_direction:
          type: string
        timestamp_argoqc:
          type: number
        vertical_sampling_scheme:
          type: string
      example:
        metadata:
        - metadata
        - metadata
        geolocation_argoqc: 1.46581298050294517310021547018550336360931396484375
        data:
        - - ""
          - ""
        - - ""
          - ""
        basin: 0.80082819046101150206595775671303272247314453125
        source:
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        date_updated_argovis: 2000-01-23T04:56:07.000+00:00
        data_info:
        - ""
        - ""
        data_warning:
        - degenerate_levels
        - degenerate_levels
        vertical_sampling_scheme: vertical_sampling_scheme
        cycle_number: 6.02745618307040320615897144307382404804229736328125
        timestamp_argoqc: 5.962133916683182377482808078639209270477294921875
        _id: _id
        profile_direction: profile_direction
        geolocation:
          coordinates:
          - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
          type: type
        timestamp: 2000-01-23T04:56:07.000+00:00
    argoMeta:
      required:
      - _id
      - data_type
      type: object
      properties:
        _id:
          type: string
        data_type:
          type: string
        country:
          type: string
        data_center:
          type: string
        instrument:
          type: string
        pi_name:
          type: array
          items:
            type: string
        platform:
          type: string
        platform_type:
          type: string
        fleetmonitoring:
          type: string
        oceanops:
          type: string
        positioning_system:
          type: string
        wmo_inst_type:
          type: string
      example:
        country: country
        positioning_system: positioning_system
        platform_type: platform_type
        pi_name:
        - pi_name
        - pi_name
        wmo_inst_type: wmo_inst_type
        data_type: data_type
        data_center: data_center
        instrument: instrument
        _id: _id
        oceanops: oceanops
        fleetmonitoring: fleetmonitoring
        platform: platform
    argotrajectory:
      required:
      - _id
      - cycle_number
      - geolocation
      - geolocation_ascending
      - geolocation_ascending_transmitted
      - geolocation_descending
      - geolocation_descending_transmitted
      - geolocation_midpoint_transmitted
      - metadata
      - timestamp
      - timestamp_ascending
      - timestamp_ascending_transmitted
      - timestamp_descending
      - timestamp_descending_transmitted
      - timestamp_midpoint_transmitted
      type: object
      properties:
        _id:
          type: string
        cycle_number:
          type: number
        geolocation:
          $ref: '#/components/schemas/geoJSONpoint'
        timestamp:
          type: string
          format: date-time
        geolocation_descending:
          $ref: '#/components/schemas/geoJSONpoint'
        timestamp_descending:
          type: string
          format: date-time
        geolocation_ascending:
          $ref: '#/components/schemas/geoJSONpoint'
        timestamp_ascending:
          type: string
          format: date-time
        geolocation_descending_transmitted:
          $ref: '#/components/schemas/geoJSONpoint'
        timestamp_descending_transmitted:
          type: string
          format: date-time
        geolocation_ascending_transmitted:
          $ref: '#/components/schemas/geoJSONpoint'
        timestamp_ascending_transmitted:
          type: string
          format: date-time
        geolocation_midpoint_transmitted:
          $ref: '#/components/schemas/geoJSONpoint'
        timestamp_midpoint_transmitted:
          type: string
          format: date-time
        metadata:
          type: array
          items:
            type: string
        data:
          $ref: '#/components/schemas/data'
      example:
        metadata:
        - metadata
        - metadata
        geolocation_midpoint_transmitted: null
        data:
        - - ""
          - ""
        - - ""
          - ""
        geolocation_ascending_transmitted: null
        geolocation_descending_transmitted: null
        timestamp_ascending: 2000-01-23T04:56:07.000+00:00
        timestamp_descending: 2000-01-23T04:56:07.000+00:00
        timestamp_midpoint_transmitted: 2000-01-23T04:56:07.000+00:00
        timestamp_descending_transmitted: 2000-01-23T04:56:07.000+00:00
        cycle_number: 0.80082819046101150206595775671303272247314453125
        geolocation_descending: null
        timestamp_ascending_transmitted: 2000-01-23T04:56:07.000+00:00
        _id: _id
        geolocation_ascending: null
        geolocation:
          coordinates:
          - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
          type: type
        timestamp: 2000-01-23T04:56:07.000+00:00
    argotrajectoryMeta:
      required:
      - _id
      - data_type
      type: object
      properties:
        _id:
          type: string
        platform:
          type: string
        data_type:
          type: string
        source:
          type: array
          items:
            $ref: '#/components/schemas/generic_source_info'
        date_updated_argovis:
          type: string
          format: date-time
        positioning_system_flag:
          type: number
        sensor_type_flag:
          type: number
        mission_flag:
          type: number
        extrapolation_flag:
          type: number
        positioning_system:
          type: string
        platform_type:
          type: string
        data_info:
          $ref: '#/components/schemas/data_info'
      example:
        positioning_system: positioning_system
        data_info:
        - ""
        - ""
        sensor_type_flag: 6.02745618307040320615897144307382404804229736328125
        mission_flag: 1.46581298050294517310021547018550336360931396484375
        platform_type: platform_type
        data_type: data_type
        _id: _id
        source:
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        positioning_system_flag: 0.80082819046101150206595775671303272247314453125
        extrapolation_flag: 5.962133916683182377482808078639209270477294921875
        date_updated_argovis: 2000-01-23T04:56:07.000+00:00
        platform: platform
    data_adjacent:
      anyOf:
      - type: array
        items:
          type: string
      - type: object
        additionalProperties:
          type: string
    argo_data_keys:
      type: array
      items:
        pattern: "^((~)?((bbp470)|(bbp532)|(bbp700)|(bbp700_2)|(bisulfide)|(cdom)|(chla)|(cndc)|(cndx)|(cp660)|(down_irradiance380)|(down_irradiance412)|(down_irradiance442)|(down_irradiance443)|(down_irradiance490)|(down_irradiance555)|(down_irradiance670)|(downwelling_par)|(doxy)|(doxy2)|(doxy3)|(molar_doxy)|(nitrate)|(ph_in_situ_total)|(pressure)|(salinity)|(salinity_sfile)|(temperature)|(temperature_sfile)|(turbidity)|(up_radiance412)|(up_radiance443)|(up_radiance490)|(up_radiance555){1})((_std)|(_med){1})?(_argoqc)?|all|except-data-values|[0-9]+)$"
        type: string
    argotrajectory_data_keys:
      type: array
      items:
        pattern: "^((~)?((velocity_zonal)|(velocity_meridional)|(velocity_zonal_transmitted)|(velocity_meridional_transmitted)|(speed)|(speed_transmitted)|(drift_pres)|(drift_temp)|(number_surface_fixes){1})|all|except-data-values)$"
        type: string
    genericTimeseries:
      required:
      - _id
      - basin
      - geolocation
      - metadata
      type: object
      properties:
        _id:
          type: string
        metadata:
          type: array
          items:
            type: string
        geolocation:
          $ref: '#/components/schemas/geoJSONpoint'
        basin:
          type: number
        data:
          $ref: '#/components/schemas/data'
        level:
          type: number
      example:
        metadata:
        - metadata
        - metadata
        data:
        - - ""
          - ""
        - - ""
          - ""
        level: 6.02745618307040320615897144307382404804229736328125
        _id: _id
        basin: 0.80082819046101150206595775671303272247314453125
        geolocation:
          coordinates:
          - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
          type: type
    genericTimeseriesMeta:
      required:
      - _id
      - data_info
      - data_type
      - date_updated_argovis
      - source
      - timeseries
      type: object
      properties:
        _id:
          type: string
        data_type:
          type: string
        data_info:
          $ref: '#/components/schemas/data_info'
        date_updated_argovis:
          type: string
          format: date-time
        timeseries:
          $ref: '#/components/schemas/timeseries'
        source:
          type: array
          items:
            $ref: '#/components/schemas/generic_source_info'
      example:
        data_info:
        - ""
        - ""
        timeseries:
        - 2010-01-01T00:00:00Z
        - 2010-01-01T00:00:00Z
        data_type: data_type
        _id: _id
        source:
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        date_updated_argovis: 2000-01-23T04:56:07.000+00:00
    genericExtended:
      required:
      - _id
      - basins
      - geolocation
      - metadata
      - raster
      - timestamp
      type: object
      properties:
        _id:
          type: string
        metadata:
          type: array
          items:
            type: string
        geolocation:
          $ref: '#/components/schemas/geoJSONmultipolygon'
        true_geolocation:
          $ref: '#/components/schemas/geoJSONmultipolygon'
        timestamp:
          type: string
          format: date-time
        raster:
          type: array
          items:
            type: array
            items:
              anyOf:
              - type: number
              - type: array
                items:
                  type: number
        basins:
          type: array
          items:
            type: integer
        flags:
          type: array
          items:
            type: string
      example:
        metadata:
        - metadata
        - metadata
        true_geolocation: null
        raster:
        - - ""
          - ""
        - - ""
          - ""
        flags:
        - flags
        - flags
        _id: _id
        basins:
        - 6
        - 6
        geolocation:
          coordinates:
          - - - - 0.80082819046101150206595775671303272247314453125
                - 0.80082819046101150206595775671303272247314453125
              - - 0.80082819046101150206595775671303272247314453125
                - 0.80082819046101150206595775671303272247314453125
            - - - 0.80082819046101150206595775671303272247314453125
                - 0.80082819046101150206595775671303272247314453125
              - - 0.80082819046101150206595775671303272247314453125
                - 0.80082819046101150206595775671303272247314453125
          - - - - 0.80082819046101150206595775671303272247314453125
                - 0.80082819046101150206595775671303272247314453125
              - - 0.80082819046101150206595775671303272247314453125
                - 0.80082819046101150206595775671303272247314453125
            - - - 0.80082819046101150206595775671303272247314453125
                - 0.80082819046101150206595775671303272247314453125
              - - 0.80082819046101150206595775671303272247314453125
                - 0.80082819046101150206595775671303272247314453125
          type: type
        timestamp: 2000-01-23T04:56:07.000+00:00
    genericExtendedMeta:
      required:
      - _id
      - data_info
      - data_type
      - date_updated_argovis
      - source
      type: object
      properties:
        _id:
          type: string
        data_type:
          type: string
        data_info:
          $ref: '#/components/schemas/data_info'
        date_updated_argovis:
          type: string
          format: date-time
        source:
          type: array
          items:
            $ref: '#/components/schemas/generic_source_info'
      example:
        data_info:
        - ""
        - ""
        data_type: data_type
        _id: _id
        source:
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        - date_updated: 2000-01-23T04:56:07.000+00:00
          source:
          - source
          - source
          url: url
          doi: doi
        date_updated_argovis: 2000-01-23T04:56:07.000+00:00
    errorResponse:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    inline_response_200:
      type: object
      properties:
        _id:
          type: string
          enum:
          - argo_overview
        summary:
          $ref: '#/components/schemas/inline_response_200_summary'
      example:
        summary:
          datacenters:
          - datacenters
          - datacenters
          nCore: 0.80082819046101150206595775671303272247314453125
          nBGC: 6.02745618307040320615897144307382404804229736328125
          nDeep: 1.46581298050294517310021547018550336360931396484375
          mostrecent: 2010-01-01T00:00:00Z
        _id: argo_overview
    inline_response_200_1:
      type: object
      properties:
        _id:
          type: string
          enum:
          - argo_dacs
        summary:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_1_summary'
      example:
        summary:
        - _id: _id
          "n": 0.80082819046101150206595775671303272247314453125
          mostrecent: 2010-01-01T00:00:00Z
        - _id: _id
          "n": 0.80082819046101150206595775671303272247314453125
          mostrecent: 2010-01-01T00:00:00Z
        _id: argo_dacs
    inline_response_200_2:
      type: object
      properties:
        _id:
          type: string
          enum:
          - argo_bgc
        summary:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_1_summary'
      example:
        summary:
        - _id: _id
          "n": 0.80082819046101150206595775671303272247314453125
          mostrecent: 2010-01-01T00:00:00Z
        - _id: _id
          "n": 0.80082819046101150206595775671303272247314453125
          mostrecent: 2010-01-01T00:00:00Z
        _id: argo_bgc
    easyoceanMeta_occupancies:
      type: object
      properties:
        varying_direction:
          type: string
        static_direction:
          type: string
        expocodes:
          type: array
          items:
            type: string
        time_boundaries:
          type: array
          items:
            type: string
            format: date-time
      example:
        varying_direction: varying_direction
        expocodes:
        - expocodes
        - expocodes
        static_direction: static_direction
        time_boundaries:
        - 2000-01-23T04:56:07.000+00:00
        - 2000-01-23T04:56:07.000+00:00
    inline_response_200_summary:
      type: object
      properties:
        nCore:
          type: number
        nBGC:
          type: number
        nDeep:
          type: number
        mostrecent:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
        datacenters:
          type: array
          items:
            type: string
      example:
        datacenters:
        - datacenters
        - datacenters
        nCore: 0.80082819046101150206595775671303272247314453125
        nBGC: 6.02745618307040320615897144307382404804229736328125
        nDeep: 1.46581298050294517310021547018550336360931396484375
        mostrecent: 2010-01-01T00:00:00Z
    inline_response_200_1_summary:
      type: object
      properties:
        _id:
          type: string
        "n":
          type: number
        mostrecent:
          type: string
          format: date-time
          example: 2010-01-01T00:00:00Z
      example:
        _id: _id
        "n": 0.80082819046101150206595775671303272247314453125
        mostrecent: 2010-01-01T00:00:00Z
  responses:
    badRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    notFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    serverError:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
  parameters:
    arDate:
      name: date
      in: query
      description: three hour increments starting at 2004-01-01T00:00:00 and ending
        at 2017-04-02T03:00:00
      required: false
      style: form
      explode: true
      allowReserved: true
      schema:
        type: string
        format: date-time
        example: 2010-01-01T00:00:00Z
    arID:
      name: _id
      in: query
      description: ID of an atmospheric river object
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: 1_262992
    tcName:
      name: name
      in: query
      description: name of tropical cyclone
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: LANE
    startDate:
      name: startDate
      in: query
      description: ISO 8601 UTC date-time formatted string indicating the beginning
        of the time period of interest.
      required: false
      style: form
      explode: true
      allowReserved: true
      schema:
        type: string
        format: date-time
        example: 2010-01-01T00:00:00Z
    endDate:
      name: endDate
      in: query
      description: ISO 8601 UTC date-time formatted string indicating the end of the
        time period of interest.
      required: false
      style: form
      explode: true
      allowReserved: true
      schema:
        type: string
        format: date-time
        example: 2010-01-01T00:00:00Z
    gridName:
      name: gridName
      in: query
      description: name of the gridded product to query.
      required: true
      style: form
      explode: true
      schema:
        type: string
        example: rgTempTotal
    presRange:
      name: presRange
      in: query
      description: Pressure range in dbar to filter for; levels outside this range
        will not be returned.
      required: false
      style: form
      explode: false
      allowReserved: true
      schema:
        type: array
        example: "10,20.1"
        items:
          maxItems: 2
          minItems: 2
          type: number
    forecastOrigin:
      name: forecastOrigin
      in: query
      description: "Longitude,latitude of forecast origin location."
      required: false
      style: form
      explode: false
      allowReserved: true
      schema:
        type: array
        example: "10,20.1"
        items:
          maxItems: 2
          minItems: 2
          type: number
    forecastGeolocation:
      name: forecastGeolocation
      in: query
      description: "Longitude,latitude of forecast destination location."
      required: false
      style: form
      explode: false
      allowReserved: true
      schema:
        type: array
        example: "10,20.1"
        items:
          maxItems: 2
          minItems: 2
          type: number
    profileSource:
      name: source
      in: query
      description: Experimental program source(s) to search for; document must match
        all sources to be returned. Accepts ~ negation to filter out documents. See
        /<data route>/vocabulary?parameter=source for list of options.
      required: false
      style: form
      explode: false
      allowReserved: true
      schema:
        type: array
        example: "argo_bgc,~argo_core"
        items:
          type: string
    woceline:
      name: woceline
      in: query
      description: WOCE line to search for. See /cchdo/vocabulary?parameter=woceline
        for list of options.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: A10
    cchdo_cruise:
      name: cchdo_cruise
      in: query
      description: CCHDO cruise ID to search for. See /cchdo/vocabulary?parameter=cchdo_cruise
        for list of options.
      required: false
      style: form
      explode: true
      schema:
        type: number
        example: 518
    compression:
      name: compression
      in: query
      description: Data minification strategy to apply.
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - minimal
    winding:
      name: winding
      in: query
      description: Enforce ccw winding for polygon and multipolygon
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - "true"
    genericID:
      name: id
      in: query
      description: Unique ID to search for.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: 4902911_0
    platformID:
      name: platform
      in: query
      description: Unique platform ID to search for.
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: "4902911"
    platform_type:
      name: platform_type
      in: query
      description: Make/model of platform
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: PALACE
    polygon:
      name: polygon
      in: query
      description: "array of [lon, lat] vertices describing a polygon bounding the\
        \ region of interest; final point must match initial point"
      required: false
      style: form
      explode: true
      allowReserved: true
      schema:
        type: string
        example: "[[-74.1,40.5],[-73.7,40.5],[-74.0,40.8],[-74.1,40.5]]"
    multipolygon:
      name: multipolygon
      in: query
      description: array of polygon regions; region of interest is taken as the intersection
        of all listed polygons.
      required: false
      style: form
      explode: true
      allowReserved: true
      schema:
        type: string
        example: "[[[0,0],[0,1],[1,1],[1,0],[0,0]],[[0.5,0],[0.5,1],[1.5,1],[1.5,0],[0.5,0]]]"
    box:
      name: box
      in: query
      description: "lon, lat pairs of the lower left and upper right corners of a\
        \ box on a mercator projection, packed like [[lower left lon, lower left lat],[upper\
        \ right lon, upper right lat]]"
      required: false
      style: form
      explode: true
      allowReserved: true
      schema:
        type: string
        example: "[[0,0],[1,1]]"
    center:
      name: center
      in: query
      description: center to measure max radius from when defining circular region
        of interest; must be used in conjunction with query string parameter 'radius'.
      required: false
      style: form
      explode: false
      allowReserved: true
      schema:
        type: array
        example: "10,20.1"
        items:
          maxItems: 2
          minItems: 2
          type: number
    radius:
      name: radius
      in: query
      description: km from centerpoint when defining circular region of interest;
        must be used in conjunction with query string parameter 'center'.
      required: false
      style: form
      explode: true
      schema:
        type: number
        example: 50
    mostrecent:
      name: mostrecent
      in: query
      description: get back only the n records with the most recent values of timestamp.
      required: false
      style: form
      explode: true
      schema:
        type: number
    batchMeta:
      name: batchmeta
      in: query
      description: return the metadata documents corresponding to a temporospatial
        data search
      required: false
      style: form
      explode: true
      schema:
        type: string
    lat:
      name: lat
      in: query
      description: latitude (degrees) of Argo float location
      required: true
      style: form
      explode: true
      schema:
        maximum: 90
        minimum: -90
        type: number
        example: 5.25
    lon:
      name: lon
      in: query
      description: longitude (degrees) of Argo float location
      required: true
      style: form
      explode: true
      schema:
        maximum: 180
        minimum: -180
        type: number
        example: -20.33
    forcastDays:
      name: forcastDays
      in: query
      description: number of days over which to project Argo float drift
      required: true
      style: form
      explode: true
      schema:
        maximum: 1800
        minimum: 60
        type: number
        example: 60
        enum:
        - 60
        - 120
        - 140
        - 240
        - 360
        - 480
        - 720
        - 840
        - 960
        - 1080
        - 1200
        - 1320
        - 1440
        - 1560
        - 1680
        - 1800
    wmo:
      name: wmo
      in: query
      description: World Meteorological Organization identification number
      required: false
      style: form
      explode: true
      schema:
        type: number
        example: 1300915
    metadata:
      name: metadata
      in: query
      description: metadata pointer
      required: false
      style: form
      explode: true
      schema:
        type: string
